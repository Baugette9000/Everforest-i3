;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; **

;; ** Variables ***********************************************************************

;; stats 
(defpoll ramPerc :interval "10s"  "scripts/sys_info --mem")
(defpoll ram :interval "1s" "free | awk -v RS=\"\" '{ printf \"%.2f\\n\", $9/1024/1024 }'")
(defpoll cpu :interval "1s"  "scripts/sys_info --cpu")
(defpoll bat :interval "1s"  "scripts/sys_info --bat")
(defpoll batIcon :interval "1s"  "scripts/sys_info --baticon")
(defpoll bright :interval "1s"  "scripts/sys_info --bli")
(defpoll brightIcon :interval "1s"  "scripts/sys_info --bliicon")
(defpoll vol :interval "1s"  "scripts/sys_info --vol")
(defpoll volIcon :interval "1s"  "scripts/sys_info --volicon")
(defpoll temp :interval "1s" "scripts/sys_info --temp")
(defpoll tempIcon :interval "10s" "scripts/sys_info --tempicon")
(defpoll CPU :interval "10s" "scripts/sys_info --CPU")

;; Profile vars
(defvar IMAGE "images/azumaril.png")
(defvar NAME "Welcome, Cleo!")
(defpoll UNAME :interval "5m" `cat /etc/hostname`)
(defpoll HELLO :interval "1s" `/home/cleo/scripts/shtime.sh`)
(defpoll DATE :interval "1s" `scripts/open_apps --date`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)
(defpoll PLAYING :interval "1s" `scripts/music_info --curl`)
(defpoll PLAYNAME :interval "1s" `scripts/music_info --name`)
(defpoll BUN :interval "1s" `scripts/open_apps --bun`)

;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; Apps vars
(defpoll MAILS :interval "5m" `scripts/mails`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)


;; ** Widgets *************************************************************************

;; stat left bar
(defwidget statslef[]
  (box :class "bg" :orientation "h" :space-evenly "true" :valign "top" :halign "center"
    (box :class "cpu-container" :halign "center" :valign "top"
      (overlay
        (circular-progress :class "cpu-progress" :start-at "0" :value "${cpu}" :thickness "64" :halign "center")
        (circular-progress :class "cpu-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "cpu-icon" :text VOLICON :halign "center" :onclick "scripts/getVol.sh -m")
          (label :class "cpu-label" :text VOL :halign "center" :onclick "scripts/getVol.sh -m" ))))

(box :class "bg" :orientation "v" :space-evenly "true" :valign "center" :halign "center"
    (box :class "cpu-container" :halign "center" :valign "center"
      (overlay
        (circular-progress :class "cpu-progress" :start-at "0" :value "${cpu}" :thickness "64" :halign "center")
        (circular-progress :class "cpu-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "cpu-icon" :text " " :halign "center")
          (label :class "cpu-label" :text CPU :halign "center"))))

    (box :class "mem-container" :halign "center" :valign "center"
      (overlay
        (circular-progress :class "mem-progress" :start-at "0" :value "${ramPerc}" :thickness "64" :halign "center")
        (circular-progress :class "mem-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "mem-icon" :text " " :halign "center")
          (label :class "mem-label" :text " ${ram}Gb" :halign "center")))))))


(defwindow statslef :monitor 0 :wm-ignore true :hexpand "false" :vexpand "false" :windowtype "dock" :stacking "fg"
    :geometry (geometry :x "15" :y "715" :height "170" :width "50" )
            (statslef))


;; Stat Widget
(defwidget stats[]
  (box :class "stats-container" :orientation "v" :space-evenly "true" :valign "center" :halign "center"
    (box :class "cpu-container" :halign "center" :valign "center"
      (overlay
        (circular-progress :class "cpu-progress" :start-at "0" :value "${cpu}" :thickness "64" :halign "center")
        (circular-progress :class "cpu-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "cpu-icon" :text " " :halign "center")
          (label :class "cpu-label" :text CPU :halign "center"))))
    (box :class "mem-container" :halign "center" :valign "center"
      (overlay
        (circular-progress :class "mem-progress" :start-at "0" :value "${ramPerc}" :thickness "64" :halign "center")
        (circular-progress :class "mem-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "mem-icon" :text " " :halign "center")
          (label :class "mem-label" :text " ${ram}Gb" :halign "center"))))
    (box :class "temp-container" :halign "center" :valign "center"
      (overlay
        (circular-progress :class "temp-progress" :start-at "0" :value "${temp/1000}" :thickness "64" :halign "center")
        (circular-progress :class "temp-background" :value "100" :start-at "0" :thickness "60" :halign "center")
        (box :orientation "h" :space-evenly "false" :halign "center"
          (label :class "temp-icon" :text "${tempIcon}" :halign "center")
          (label :class "temp-label" :text " ${temp/1000}°C" :halign "center"))))))

;; Stats window
(defwindow stats :monitor 0 :wm-ignore true :hexpand "false" :vexpand "false" :windowtype "dock" :stacking "fg"
    :geometry (geometry :x "-6" :y "0" :height "170" :width "50" :anchor "center right")
        (stats))

;; leftbar ctl 
(defwidget leftctl []
    (box :class "bg" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label :class "bg" :halign "left" :wrap "false" :limit-width 100 :text "     ")
    (button :class "lock" :halign "center" :onclick "scripts/open_apps --lock" "   " )
    (button :class "reload" :halign "center" :onclick "scripts/open_apps --reload" "")
    (label :class "bg" :orientation "h" :halign "center" :wrap "false" :limit-width 100 :text "               ")
    (button :class "close" :halign "center" :onclick "scripts/open_apps --rst" "  ")
    (button :class "pow" :halign "center" :onclick "scripts/open_apps --pow" " ")
))

(defwindow sysctl :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 380 :y 320 :width 387 :height 110)
                            (leftctl))


;; profile leftbar
(defwidget profileleft [] 
    (box :class "musicfore" :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
            (box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
            (label :class "fullname" :halign "center" :wrap "true" :limit-width 100 :text "               Cleo   
            
")))

(defwindow profileleft :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 15 :y 70 :width 350 :height 360)
                            (profileleft))


;; left bar 
(defwidget leftbg []
    (box :class "genwin")
)

(defwindow leftbg :stacking "bg" :focusable "false" :screen 1
        :geometry (geometry :x 0 :y 60 :width 780 :height 1000 )
                            (leftbg))

;; calendar background
(defwidget calfg []
    (box :class "calfg")
)

(defwindow calendarfg :stacking "bg" :focusable "false" :screen 1
        :geometry (geometry :x 1627 :y 55 :width 365 :height 220 )
                            (calfg))

;; bun 
(defwidget bun []
    (box :class "bg"
    (label :class "playing" :halign "center" :wrap "true" :limit-width 100 :text BUN
)))

(defwindow bun :stacking "fg" :focusable "false" :screen 1
        :geometry (geometry :x 715 :y 790 :width 280 :height 150)
                            (bun))

;; greeter 
(defwidget greeter []
    (box :class "bg" :orientation "v"
    (label :class "playing" :halign "center" :wrap "true" :limit-width 100 :text HELLO)))

(defwindow greeter :stacking "fg" :focusable "false" :screen 1
        :geometry (geometry :x 725 :y 790 :width 480 :height 180)
                            (greeter))

;; calendar widget
(defwidget cal [] 
  (calendar :halign "center" :valign "center" :class "cal" :month 12 :year 2022))

(defwindow calendar
  :monitor 0
  :geometry (geometry :x 380
                      :y 70
                      :width "390px"
                      :height "155px"
                      :anchor "top left")
(cal))

;; musicinfo
(defwidget musicinfo []
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
        (label :halign "center" :class "playing" :wrap "true" :limit-width 40 :text PLAYING)))

(defwindow musicinfo :stacking "fg" :focusable "false" :screen 1
        :geometry (geometry :x 945 :y 120 :width 400 :height 55)
                    (musicinfo))


;; musicctl 1
(defwidget musctl1 [] 
    (box :class "musctl1" :vexpand "false" :hexpand "false" 
        (button :class "btn_ctl1" :onclick "scripts/open_apps --musctl1" " " )))

(defwindow musicctl1 :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1105 :y 240 :width 80 :height 55)
					(musctl1))

;; musicctl 2
(defwidget musctl2 [] 
    (box :class "musctl2" :vexpand "false" :hexpand "false" 
        (button :class "btn_ctl2" :onclick "scripts/open_apps --musctl2" "怜" )))

(defwindow musicctl2 :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 1185 :y 240 :width 80 :height 55)
                            (musctl2))

;; musicctl 3
(defwidget musctl3 [] 
    (box :class "musctl3" :vexpand "false" :hexpand "false" 
        (button :class "btn_ctl3" :onclick "scripts/open_apps --musctl3" "玲" )))

(defwindow musicctl3 :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 1010 :y 240 :width 80 :height 55)
                            (musctl3))


;; musicfore
(defwidget musicfore [] 
    (box :class "sep" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "sep" :halign "center" :wrap "true" :limit-width 9 :text "")
    (box :class "playing" :orientation "v" :spacing 10 :space-evenly "true" :vexpand "true" :hexpand "true" 
        (label :class "playing" :halign "right" :wrap "true" :limit-width 100 :text PLAYING )
    (box :orientation "h" :spacing 25 :halign "left" :space-evenly "false" :vexpand "true" :hexpand "true"
        (label :class "sepr" :halign "left" :wrap "false" :limit-width 1 :text " ")
        (button :class "btn_ctl3" :onclick "scripts/open_apps --musctl3" "玲")
    (box :orientation "h" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
        (button :class "btn_ctl1" :onclick "scripts/open_apps --musctl1" " " )
    (box :orientation "h" :spacing 0 :halign "right" :space-evenly "false" :vexpand "true" :hexpand "true"
        (button :class "btn_ctl2" :onclick "scripts/open_apps --musctl2" "怜")))))))
  

            (defwindow musicfore :stacking "bottom" :focusable "true" :screen 1
                :geometry (geometry :x 15 :y 440 :width 750 :height 260)
                                    (musicfore))

;; musicplay 
(defwidget musicplay []
    (box :class "playname" :orientation "h" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
    (label :class "playname" :halign "left" :wrap "false" :limit-width 40 :text PLAYNAME )))

(defwindow musicplay :stacking "fg" :focusable "false" :screen 1
        :geometry (geometry :x 777 :y 730 :width 50 :height 50 )
                  (musicplay))

;; musicback
(defwidget musicback []
    (box :class "musicback")
)

(defwindow musicback :stacking "bg" :focusable "false" :screen 1
        :geometry (geometry :x 877 :y 45 :width 560 :height 300 )
                            (musicback))

;; border 
(defwidget border []
    (box :class "border")
)

;; back 
(defwidget back []
    (box :class "back")
)

;; curlwttr
(defwidget curlwttr []
    (box :class "curlwttr")
)

;; bottomclass1
(defwidget bottom []
    (box :class "genwin" :vexpand "false" :hexpand "false" 
                (button :class "btn_bottomclass1" :onclick "scripts/open_apps --rst" "勒 " )))

(defwindow bottom :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 1222 :y 565 :width 325 :height 155)
                            (bottom))

;; vim
(defwidget vim []
    (box :class "genwin" :vexpand "false" :hexpand "false" 
                (button :class "btn_vim" :onclick "scripts/open_apps --vi" "  " )))

(defwindow vim :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 1222 :y 395 :width 325 :height 155)
                            (vim))


;; ranger
(defwidget ranger []
    (box :class "genwin" :vexpand "false" :hexpand "false" 
                (button :class "btn_ranger" :onclick "scripts/open_apps --ra" " " )))

(defwindow ranger :stacking "fg" :focusable "false" :screen 1 
        :geometry (geometry :x 1222 :y 230 :width 155 :height 155)
                            (ranger))


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "musicfore" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "" :onclick "scripts/open_apps --timedunst")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))

;; github
(defwidget github [] 
	(box :class "github" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --gh" "")))

;; reddit
(defwidget reddit [] 
	(box :class "reddit" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --rd" "樓")))

;; twitter
(defwidget twitter [] 
	(box :class "twitter" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --tw" "")))

;; youtube
(defwidget youtube [] 
	(box :class "youtube" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --yt" "")))

;; mail
(defwidget mail [] 
	(box :class "mail" 
		(box :orientation "h" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconmail" :onclick "scripts/open_links --mail" "")
			(box :class "mailbox" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "label_mails" :onclick "scripts/open_links --mail" MAILS)))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_stat" :text STAT)
				(label :class "label_quote" :text QUOTE)
				(label :class "label_quote" :text QUOTE2)))))

;; apps
(defwidget apps [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/firefox.svg');" :class "app_fox" :onclick "scripts/open_apps --ff")
			(button :style "background-image: url('images/icons/telegram.svg');" :class "app_telegram" :onclick "scripts/open_apps --tg")
			(button :style "background-image: url('images/icons/discord.svg');" :class "app_discord" :onclick "scripts/open_apps --dc"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --tr")
			(button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "scripts/open_apps --fm")
			(button :style "background-image: url('images/icons/geany.svg');" :class "app_geany" :onclick "scripts/open_apps --ge"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/code.svg');" :class "app_code" :onclick "scripts/open_apps --cd")
			(button :style "background-image: url('images/icons/gimp.svg');" :class "app_gimp" :onclick "scripts/open_apps --gp")
			(button :style "background-image: url('images/icons/virtualbox.svg');" :class "app_vbox" :onclick "scripts/open_apps --vb"))))

;; power buttons
(defwidget logout [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :onclick "openbox --exit" "")))
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" "")))
(defwidget reboot [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :onclick "scripts/open_apps --mc" "   " )))
(defwidget poweroff [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :onclick "scripts/open_apps --ff" "")))

;; curlwttr
(defwidget curlwttr [] 
    (box :class "genwin" :vexpand "false" :hexpand "false" 
            (button :class "btn_wttr" :onclick "scripts/open_apps --wt" " " )))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :class "hddicon" :onclick "scripts/open_apps --fm" "")
				(label :class "fs_sep" :text ""))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(button :class "iconfolder1" :onclick "scripts/open_folders --docs" "")
			(button :class "label_folder1" :onclick "scripts/open_folders --docs" "Documents"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder2" :onclick "scripts/open_folders --dl" "")
			(button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder3" :onclick "scripts/open_folders --music" "")
			(button :class "label_folder3" :onclick "scripts/open_folders --music" "Music"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder4" :onclick "scripts/open_folders --pics" "")
			(button :class "label_folder4" :onclick "scripts/open_folders --pics" "Pictures"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "ﮛ")
			(button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder6" :onclick "scripts/open_folders --local" "ﮛ")
			(button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local"))))


;; ** Windows *************************************************************************

;; curlwttr
(defwindow curlwttr :stacking "fg" :focusable "false" :screen 1 
         :geometry (geometry :x 1390  :y 230  :width 155 :height 155)
                            (curlwttr))

;; border
(defwindow border :stacking "bg" :focusable "false" :screen 1
        :geometry (geometry :x 1200 :y 45 :width 710 :height 660)
                            (border))


;; back
(defwindow back :stacking "bg" :focusable "false" :screen 1
        :geometry (geometry :x 1210 :y 55 :width 690 :height 680)
                    (back))

;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1 :y 1 :width "1920px" :height "1080px")
					(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 765 :y 350 :width 350 :height 420)
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 604 :y 605 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 150 :width 350 :height 155)
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1555 :y 66 :width 330 :height 155)
					(uptime))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 490 :width 610 :height 280)
					(music))

;; github
(defwindow github :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 785 :width 141 :height 145)
					(github))

;; reddit
(defwindow reddit :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 671 :y 785 :width 141 :height 145)
					(reddit))

;; twitter
(defwindow twitter :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 827 :y 785 :width 141 :height 145)
					(twitter))

;; youtube
(defwindow youtube :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 983 :y 785 :width 142 :height 145)
					(youtube))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 880 :y 150 :width 550 :height 325)
					(weather))

;; apps
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
					(apps))

;; mail
(defwindow mail :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1140 :y 785 :width 290 :height 145)
					(mail))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
					(logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1390 :y 66 :width 155 :height 155)
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1222 :y 66 :width 155 :height 155)
					(poweroff))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1554 :y 230 :width 330 :height 490)
					(folders))

;; Volume var
(defpoll VOL :interval "1s" `scripts/getVol.sh --vol`)
(defpoll VOLICON :interval "1s" `scripts/getVol.sh --icon`)


